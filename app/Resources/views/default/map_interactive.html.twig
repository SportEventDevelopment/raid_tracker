
{% extends 'base.html.twig' %}
{% block title %}
    Carte Interactive
{% endblock %}

{% block content %}    


<body onload="init();">
    <script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
    <script src="{{asset('js/leaflet-toolbar/dist/leaflet.toolbar.js')}}"></script>
    <script src="{{asset('js/leaflet-draw-toolbar/dist/leaflet.draw-toolbar.js')}}"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://github.com/k4r573n/leaflet-control-osm-geocoder/blob/master/Control.OSMGeocoder.js"></script>
    <link rel="stylesheet" href="{{asset('js/leaflet-toolbar/dist/leaflet.toolbar.css')}}"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css"/>
    <link rel="stylesheet" href="https://github.com/k4r573n/leaflet-control-osm-geocoder/blob/master/Control.OSMGeocoder.css"/>

    <div id="mapid"></div>

    <script>
        function init(){
            var mymap = L.map('mapid');
            longitude = 2.43896484375;
            latitude = 46.52863469527167;
            echelle = 6;
            
            mymap.setView([latitude, longitude], echelle);
            L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(mymap);

            {#var osmGeocoder = new L.Control.OSMGeocoder({
                position:'topright',
                collapsed:false
            });
            mymap.addControl(osmGeocoder);#}

            var drawnItems = new L.FeatureGroup();
            mymap.addLayer(drawnItems);

            {#document.getElementsByClassName("leaflet-control-zoom-in").innerHTML = 'teessaixt';#}
            
            var drawControl = new L.Control.Draw({
                position:'topleft',
                edit: {
                    featureGroup: drawnItems
                },
                draw: {
                    polyline: true,
                    circle: false,
                    polygon: false,
                    marker: true,
                    circlemarker: false,
                    rectangle: false,
                },
                polyline: {
                        shapeOptions: {
                            color: '#f357a1',
                            weight: 10,
                            title:'essai'
                        }
                    },
            });

            {#var options = new L.Control.Draw({
                draw: {
                    polygon: {
                        allowIntersection: false, // Restricts shapes to simple polygons
                        drawError: {
                            color: '#e1e100', // Color the shape will turn when intersects
                            message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
                        },
                        shapeOptions: {
                            color: '#97009c'
                        }
                    },
                    polyline: {
                        shapeOptions: {
                            color: '#f357a1',
                            weight: 10,
                        }
                    },
                    // disable toolbar item by setting it to false
                    polyline: true,
                    circle: true,
                    polygon: true,
                    marker: true,
                    rectangle: true,
                },
                edit: {
                    featureGroup: drawnItems, //REQUIRED!!
                }
            });#}

            
            mymap.addControl(drawControl);

            var editableLayers = new L.FeatureGroup();
            mymap.addLayer(editableLayers);

            mymap.on('draw:created', function(e) {
                var type = e.layerType,
                    layer = e.layer;
                    {#console.log(e.layer.editing.latlngs[0][0]);#}

                if (type === 'polyline') {
                    drawnItems.addLayer(layer);
                }
                else if ( type === 'polygon') {
                    drawnItems.addLayer(layer);
                }
                else if (type === 'marker') {
                    drawnItems.addLayer(layer);
                }
                else if (type === 'circlemarker') {
                    drawnItems.addLayer(layer);
                }
                else if (type === 'circle') {
                    drawnItems.addLayer(layer);
                }
                else if (type === 'rectangle') {
                    drawnItems.addLayer(layer);
                }
                editableLayers.addLayer(layer);
            });

            var positionUser = function() {
                if(navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(showPosition);
                }
                else {
                    alert("La localisation n'est pas disponible avec votre navigateur !");
                }
            }

            var showPosition = function(position) {
                latitude = position.coords.latitude;
                longitude = position.coords.longitude;
                echelle = 18;

                mymap.setView([latitude, longitude], echelle);
                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(mymap);

                var latlng = [latitude, longitude];
                var marker = L.marker([latitude, longitude]).addTo(mymap);
                var popup = L.popup().setLatLng(latlng).setContent('<p>Vous Ãªtes ici<br>Latitude: '+ latitude +'<br>Longitude: '+longitude+'</p>').openOn(mymap);
                marker.bindPopup(popup).openPopup();
                
            }
            positionUser();
        }
    </script>

</body>
{% endblock %}
